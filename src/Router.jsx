import React from "react";
import './myProject.css';
import { routeCode1, routeCode2, routeCode3, routeCode4, routeCode5 } from './ImportCode'
const Router = () => {
    return (
        <>
            <h2> Router</h2>
            <p>В React имеется своя система маршрутизации, которая позволяет сопоставлять запросы к приложению с
                определенными компонентами. Ключевым звеном в работе маршрутизации является модуль react-router,
                который содержит основной функционал по работе с маршрутизацией. Однако если мы собираемся работать
                в браузере, то нам также надо использовать модуль react-router-dom.</p>
            
            <pre >
                <code className="codeStyle">
                    {routeCode1}
                </code>
            </pre>
           
            <p>После установки React Router Dom v6 можно начать использовать его в проекте. Для этого нужно
                импортировать необходимые компоненты и обернуть приложение в BrowserRouter.В файле, где вы хотите
                использовать React Router Dom, добавьте следующий импорт:</p>
            <pre>
                <code className="codeStyle">
                    {routeCode2}
                </code>
            </pre>
            <p>Затем оберни приложение в компонент BrowserRouter. Это можно сделать в корневом файле проекта, например,
                в файле index.js, который используется для рендеринга  приложения:</p>
            <pre>
                <code className="codeStyle">
                    {routeCode3}
                </code>
            </pre>
            <p>Здесь оборачивается компонент `App` (главный компонент) в компонент `BrowserRouter`. Это позволяет
                React Router Dom управлять маршрутизацией внутри приложения.Теперь, когда импортировал и использовал
                BrowserRouter, ты готов начать использовать другие компоненты React Router Dom для определения маршрутов,
                создания ссылок и управления навигацией.</p>

            <p>Теперь давай рассмотрим основные компоненты React Router Dom v6, которые помогут тебе реализовать роутинг в приложении.</p>
            <p>Routes:
                Routes - это компонент-контейнер, в котором определяют все маршруты в приложении. Мы используем Routes для группировки нескольких Route компонентов,
                а они в свою очередь определяют отдельные маршруты, каждый  Route имеет свой путь (path) и элемент (element), который будет
                отображаться, когда маршрут совпадает. Вот пример:.</p>
            <pre>
                <code className="codeStyle">
                    {routeCode4}
                </code>
            </pre>
            <p>Link: используется для создания ссылок для навигации между маршрутами в приложении.</p>
            <p>NavLink:позволяет создавать активные ссылки, добавляя класс "active" к текущему активному маршруту.
                Атрибут to указывает путь маршрута, а activeClassName добавляет класс "active" к активному маршруту.
                Основное отличие между Link и NavLink заключается в возможности создания активных ссылок с помощью NavLink.
                NavLink добавляет класс "active" к ссылке, когда соответствующий маршрут активен.</p>
            <p>useNavigate: это хук, который позволяет перенаправлять пользователя на другие маршруты в React Router Dom v6.
                Когда ты используешь useNavigate, ты можешь получить функцию navigate и использовать ее для перенаправления пользователя
                на другой маршрут. Вот пример:</p>
            <pre>
                <code className="codeStyle">
                    {routeCode5}
                </code>
            </pre>
            <p>Outlet: играет ключевую роль в отображении компонентов, соответствующих текущему маршруту. Когда ты используешь Outlet,
                он служит контейнером для отображения компонентов, которые соответствуют маршрутам в твоем приложении.Outlet является
                местом, где будут отображаться компоненты, соответствующие текущему маршруту.Когда пользователь переходит по разным
                маршрутам, Outlet автоматически рендерит компоненты, связанные с этими маршрутами. Например, если текущий маршрут
                - "/about", то компонент, соответствующий этому маршруту, будет отображен внутри Outlet. Важно отметить,
                что Outlet должен быть расположен внутри компонента, который уже является частью маршрутизации, например, внутри
                компонента, который используется в маршруте.</p>
        </>
    )
}
export default Router